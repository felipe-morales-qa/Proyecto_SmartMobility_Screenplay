import { type FullConfig } from '@playwright/test';
import { type TestCase, type TestResult } from '@playwright/test/reporter';
import { type DomainEvent } from '@serenity-js/core/lib/events';
export declare class PlaywrightEventBuffer {
    private readonly errorParser;
    private readonly eventStreamReader;
    private eventFactory;
    private readonly events;
    private readonly deferredSceneFinishedEvents;
    configure(config: Pick<FullConfig, 'rootDir'>): void;
    appendTestStart(test: TestCase, result: TestResult): void;
    appendRetryableSceneEvents(test: TestCase, result: TestResult): void;
    deferAppendingSceneFinishedEvent(test: TestCase, result: TestResult): void;
    private determineScenarioOutcome;
    appendCrashedWorkerEvents(test: TestCase, result: TestResult): void;
    appendSceneEvents(test: TestCase, result: TestResult): void;
    private readEventStream;
    appendSceneFinishedEvent(test: TestCase, result: TestResult): void;
    flush(test: TestCase, result: TestResult): DomainEvent[];
    flushAllDeferred(): DomainEvent[];
    private determineWorstInteractionOutcome;
    private outcomeFrom;
    private sceneId;
}
//# sourceMappingURL=PlaywrightEventBuffer.d.ts.map